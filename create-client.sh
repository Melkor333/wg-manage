#!/usr/bin/env bash
set -euo pipefail
set +x

VERSION=0.1

# Thanks to the sweet internets
# https://stackoverflow.com/questions/33056385/increment-ip-address-in-a-shell-script
nextip(){
    IP=$1
    IP_HEX=$(printf '%.2X%.2X%.2X%.2X\n' $(echo $IP | sed -e 's/\./ /g'))
    NEXT_IP_HEX=$(printf %.8X $(echo $(( 0x$IP_HEX + 1 ))))
    NEXT_IP=$(printf '%d.%d.%d.%d\n' $(echo $NEXT_IP_HEX | sed -r 's/(..)/0x\1 /g'))
    echo "$NEXT_IP"
}


## Parse Parameters
# see: https://www.codebyamir.com/blog/parse-command-line-arguments-using-getopt
usage() {
  echo ""
  echo "Version $VERSION"
  echo "Usage: $0 "
  echo "[-c --client <string>] Client name"
  echo ""
  echo "Optional:"
  echo "[-n --name <string>] Name of the wggt config (default: wggt)"
  echo "[-a --address <string>] Client Wireguard IP. Format: 10.0.0.2/30 (default taken from last_address file)"
  echo "[-e --endpoint <string>] Server endpoint IP or dns and : port. Format: 77.22.33.44:51820 (default taken from endpoint file)"
  echo "[-d --dns <string>] a DNS configuration. E.g. '10.0.0.1, example.com'"
  echo "[-s --subnets <string>] AllowedIPs Directive to route vpn clients + shared vpn services => \"10.190.248.0/30, 10.190.4.0/23\" (default taken from allowed_ips file)"
  echo "[-r --root <string>] The root directory (default: /etc/wireguard)"
  echo "[--serverhostname <string>] Overwrite Hostname=Servername (default: $HOSTNAME). This is used to get the pubkey of the server hostname serverhostname.pub"
  echo "[-h / --help]"
  echo 1>&2;
  exit 1;
}

# https://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
SCRIPT_DIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

# set initial values
ADDRESS=''
ENDPOINT=''
SUBNETS=''
ROOT=''
CLIENT=''
DNS=''
NAME=wggt
ROOT=/etc/wireguard
SERVER_HOSTNAME=$HOSTNAME
SERVER_FILE=$ROOT/$NAME.conf


SHORT=c:n:a:e:d:s:r:h
LONG=client:,name:,address:,endpoint:,dns:,root:,subnets:,serverhostname:,help
OPTS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
if [ $? != 0 ] ; then echo "Failed to parse options...exiting." >&2 ; usage; exit 1 ; fi
eval set -- "$OPTS"
while true ; do
  case "$1" in
    -h | --help )
      usage
      shift
      ;;
    -c | --client )
      CLIENT="$2"
      shift 2
      ;;
    -n | --name )
      NAME="$2"
      shift 2
      ;;
    -a | --address )
      ADDRESS="$2"
      shift 2
      ;;
    -e | --endpoint )
      ENDPOINT="$2"
      shift 2
      ;;
    -d | --dns )
      DNS="$2"
      shift 2
      ;;
    -s | --subnets )
      SUBNETS="$2"
      shift 2
      ;;
    -r | --root )
      ROOT="$2"
      shift 2
      ;;
    --serverhostname )
      SERVER_HOSTNAME="$2"
      shift 2
      ;;
    -- )
      shift
      break
      ;;
    *)
      CLIENT="$1"
      echo "Internal error (geopt)!"
      echo "$CLIENT"
      usage;
      exit 1
      ;;
  esac
done

SERVER_FILE="$ROOT/$NAME.conf"
ROOT="$ROOT/$NAME"

# Validate
# ______________________________________________________________________________
if [ -z "${CLIENT}" ]; then
  echo "ERROR: -c / --client is missing"
  echo ""
  usage
fi

if [ -f "$ROOT/$CLIENT.conf" ]; then
  echo "File $ROOT/$CLIENT.conf already exists!"
  exit 1
fi

if [[ ! -d "${ROOT}" ]]; then
    echo "Directory ${ROOT} doesn't exist. Create first with ./create-server.sh"  
    usage
fi

if [ -z "${ENDPOINT}" ]; then
  ENDPOINT=$(cat "$ROOT/endpoint" || echo -n)
  if [ -z "${ENDPOINT}" ]; then
    echo "Missing endpoint & no endpoint file. Abording"
    usage
  fi
fi

if [ -z "$ADDRESS" ]; then
  if [ -f "$ROOT/last_address" ]; then
    LAST_ADDR=$(cat "$ROOT/last_address")
    ADDRESS=$(nextip "${LAST_ADDR%/*}")
  else
    echo "No Address for this endpoint."
    usage
  fi
fi

SUB=${LAST_ADDR#*/}
if [ -z "$SUBNETS" ]; then
  if [ -f "$ROOT/subnets" ]; then
    cat "$ROOT/subnets" 
    SUBNETS="${ADDRESS%.*}.0/$SUB, $(cat "$ROOT/subnets")"
  fi
    echo "$ROOT/subnets" 
else
  SUBNETS="${ADDRESS%.*}.0/$SUB, $SUBNETS"
fi

# Create client Keys
# ______________________________________________________________________________
pushd "$ROOT"
if [ -f "$ROOT/$CLIENT.key" ]; then
  echo "File $ROOT/$CLIENT.key already exists! Reusing this private key"
else
  wg genkey > "$CLIENT.key"
fi
wg pubkey > "$CLIENT.pub" < "$CLIENT.key"
PSK="$(wg genpsk)"
chmod 0644 "$CLIENT.pub"
chmod 0600 "$CLIENT.key"
popd

# Create client.conf file
# ______________________________________________________________________________
{
    echo "##########"
    echo "# $CLIENT "
    echo "##########"
    echo "# Generated by wg-manage. Version: $VERSION #"
    echo ""
    echo "[Interface]"
    echo "Address = $ADDRESS/$SUB"
    echo -n "PrivateKey = "
    cat "$ROOT/$CLIENT.key"
    # TODO: Fix this line!!
    if [ -n "$DNS" ]; then
        echo "DNS = $DNS"
    fi
    echo ""
    echo "[Peer]"
    echo -n "PublicKey = "
    cat "$ROOT/$SERVER_HOSTNAME.pub"
    echo "PresharedKey = $PSK"
    echo "Endpoint = $ENDPOINT"
    echo "PersistentKeepalive = 25"
    echo ""
    if [ -n "$SUBNETS" ]; then
        echo "AllowedIPs = $SUBNETS"
    fi
} > "$ROOT/$CLIENT.conf"

# Update lastAddress
echo "$ADDRESS/$SUB" > "$ROOT/last_address"

# Add client conf to server
# ______________________________________________________________________________
{
    echo ""
    echo "##########"
    echo "# $CLIENT "
    echo "##########"
    echo "# Generated by wg-manage. Version: $VERSION #"
    echo "[Peer]"
    echo -n "PublicKey = "
    cat "$ROOT/$CLIENT.pub"
    echo "PresharedKey = $PSK"
    echo "AllowedIPs = $ADDRESS/32"
    echo ""
} >> "$SERVER_FILE"

# Restart Service
# ______________________________________________________________________________
# TODO: wg add instead of service restart!
if wg show | grep -q "^interface: $NAME\$"; then
    wg syncconf "$NAME" "$SERVER_FILE"
fi

# Print the config
# ______________________________________________________________________________
echo -e "\033[0;32mThis is the new config $ROOT/$CLIENT.conf:\033[0m"
cat "$ROOT/$CLIENT.conf"
